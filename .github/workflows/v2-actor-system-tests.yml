name: Alys V2 Actor System Tests

on:
  push:
    branches: [ main, v2, develop ]
    paths:
      - 'crates/actor_system/**'
      - 'app/src/actors/**'
      - '.github/workflows/v2-actor-system-tests.yml'
  pull_request:
    branches: [ main, v2 ]
    paths:
      - 'crates/actor_system/**'
      - 'app/src/actors/**'
      - '.github/workflows/v2-actor-system-tests.yml'
  schedule:
    # Run nightly regression tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - supervision
        - performance
        - k8s
      log_level:
        description: 'Log level for tests'
        required: false
        default: 'info'
        type: choice
        options:
        - error
        - warn
        - info
        - debug
        - trace

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: ${{ github.event.inputs.log_level || 'info' }}

jobs:
  # Check code formatting and linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run Clippy
      run: cargo clippy -p actor_system --all-targets --all-features -- -D warnings
      
    - name: Check documentation
      run: cargo doc -p actor_system --no-deps --all-features

  # Unit tests for actor system
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_suite == 'all' || 
      github.event.inputs.test_suite == 'unit' || 
      github.event.inputs.test_suite == null
    strategy:
      matrix:
        rust: [stable, beta]
    steps:
    - uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev clang cmake
        
    - name: Run unit tests
      run: |
        cargo test -p actor_system --lib --bins \
          --features="testing" \
          -- --nocapture --test-threads=1
        
    - name: Generate test coverage
      if: matrix.rust == 'stable'
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin -p actor_system --out xml --output-dir coverage/
        
    - name: Upload coverage to Codecov
      if: matrix.rust == 'stable'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: unit-tests
        name: codecov-umbrella

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_suite == 'all' || 
      github.event.inputs.test_suite == 'integration' || 
      github.event.inputs.test_suite == null
    services:
      # Mock services for integration testing
      mock-governance:
        image: mockserver/mockserver:latest
        ports:
          - 50051:1080
        env:
          MOCKSERVER_INITIALIZATION_JSON_PATH: /config/governance-mocks.json
          
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev clang cmake
        
    - name: Setup mock services
      run: |
        # Wait for services to be ready
        timeout 60 bash -c 'until nc -z localhost 50051; do sleep 1; done'
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
        
        # Configure mock responses
        curl -X PUT "http://localhost:50051/mockserver/expectation" \
          -H "Content-Type: application/json" \
          -d @crates/actor_system/tests/fixtures/governance-mocks.json
        
    - name: Run integration tests
      env:
        GOVERNANCE_MOCK_ENDPOINT: http://localhost:50051
        REDIS_URL: redis://localhost:6379
        TEST_ENVIRONMENT: ci
      run: |
        cargo test -p actor_system --test integration_tests \
          --features="testing,integration-tests" \
          -- --nocapture --test-threads=1
        
    - name: Collect test artifacts
      if: always()
      run: |
        mkdir -p test-artifacts
        cp -r target/debug/deps/*.log test-artifacts/ || true
        cp -r logs/ test-artifacts/ || true
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-artifacts-${{ github.run_id }}
        path: test-artifacts/
        retention-days: 7

  # Supervision tree tests
  supervision-tests:
    name: Supervision Tests
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_suite == 'all' || 
      github.event.inputs.test_suite == 'supervision' || 
      github.event.inputs.test_suite == null
    steps:
    - uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-supervision-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev clang cmake
        
    - name: Run supervision tests
      env:
        MAX_TEST_ACTORS: 100
        SUPERVISION_TEST_TIMEOUT: 120
      run: |
        cargo test -p actor_system --test supervision_tests \
          --features="testing,supervision-tests" \
          -- --nocapture --test-threads=1
        
    - name: Generate supervision test report
      if: always()
      run: |
        mkdir -p test-reports
        cargo test -p actor_system --test supervision_tests \
          --features="testing,supervision-tests" \
          -- --nocapture --format json > test-reports/supervision-results.json || true
        
    - name: Upload supervision test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: supervision-test-report-${{ github.run_id }}
        path: test-reports/
        retention-days: 14

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_suite == 'all' || 
      github.event.inputs.test_suite == 'performance' || 
      github.event.inputs.test_suite == null ||
      github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-performance-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev clang cmake
        
    - name: Run performance benchmarks
      env:
        PERFORMANCE_TEST_DURATION: 300
        TARGET_MESSAGE_RATE: 1000
        MAX_MEMORY_USAGE_MB: 512
      run: |
        cargo test -p actor_system --release \
          --features="testing,performance-tests" \
          --test performance_tests \
          -- --nocapture --test-threads=1
        
    - name: Run criterion benchmarks
      run: |
        cargo bench -p actor_system \
          --features="testing" \
          -- --output-format json > performance-results.json
        
    - name: Parse performance results
      run: |
        python3 -c "
        import json
        import sys
        
        try:
            with open('performance-results.json', 'r') as f:
                data = json.load(f)
            
            print('Performance Results:')
            for result in data:
                if 'mean' in result:
                    print(f'  {result[\"id\"]}: {result[\"mean\"][\"estimate\"]:.2f} {result[\"mean\"][\"unit\"]}')
        except:
            print('No performance results to parse')
        "
        
    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ github.run_id }}
        path: |
          performance-results.json
          target/criterion/
        retention-days: 30

  # Kubernetes tests
  k8s-tests:
    name: Kubernetes Tests
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_suite == 'all' || 
      github.event.inputs.test_suite == 'k8s' ||
      github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Kubernetes (kind)
      uses: helm/kind-action@v1
      with:
        cluster_name: alys-test-cluster
        node_image: kindest/node:v1.27.3
        config: |
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
          - role: worker
            extraMounts:
            - hostPath: /tmp
              containerPath: /tmp
              
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.3'
        
    - name: Verify cluster
      run: |
        kubectl cluster-info
        kubectl get nodes
        
    - name: Build test runner image
      run: |
        # Build the test runner image
        docker build -f crates/actor_system/k8s/Dockerfile.test-runner \
          -t alys-v2-test-runner:test .
        
        # Load image into kind cluster
        kind load docker-image alys-v2-test-runner:test --name alys-test-cluster
        
    - name: Deploy test infrastructure
      run: |
        # Apply all Kubernetes manifests
        kubectl apply -f crates/actor_system/k8s/namespace.yaml
        kubectl apply -f crates/actor_system/k8s/mock-services.yaml
        kubectl apply -f crates/actor_system/k8s/monitoring.yaml
        
        # Wait for mock services to be ready
        kubectl wait --for=condition=ready pod -l app=mock-governance -n alys-v2-testing --timeout=300s
        kubectl wait --for=condition=ready pod -l app=mock-bitcoin-node -n alys-v2-testing --timeout=300s
        kubectl wait --for=condition=ready pod -l app=mock-ethereum-node -n alys-v2-testing --timeout=300s
        
    - name: Update test runner image
      run: |
        # Update deployment to use the test image
        kubectl patch deployment alys-v2-test-runner -n alys-v2-testing \
          -p '{"spec":{"template":{"spec":{"containers":[{"name":"test-runner","image":"alys-v2-test-runner:test"}]}}}}'
        
    - name: Deploy test runner
      run: |
        kubectl apply -f crates/actor_system/k8s/test-deployment.yaml
        kubectl wait --for=condition=ready pod -l app=alys-v2-test-runner -n alys-v2-testing --timeout=300s
        
    - name: Run Kubernetes integration tests
      run: |
        # Create and run test jobs
        kubectl apply -f crates/actor_system/k8s/test-jobs.yaml
        
        # Wait for integration test job to complete
        kubectl wait --for=condition=complete job/integration-test-job -n alys-v2-testing --timeout=600s
        
        # Wait for supervision test job to complete  
        kubectl wait --for=condition=complete job/supervision-test-job -n alys-v2-testing --timeout=600s
        
    - name: Collect Kubernetes test results
      if: always()
      run: |
        mkdir -p k8s-test-results
        
        # Get job logs
        kubectl logs job/integration-test-job -n alys-v2-testing > k8s-test-results/integration-test.log || true
        kubectl logs job/supervision-test-job -n alys-v2-testing > k8s-test-results/supervision-test.log || true
        
        # Get pod status and events
        kubectl get pods -n alys-v2-testing -o yaml > k8s-test-results/pod-status.yaml
        kubectl get events -n alys-v2-testing > k8s-test-results/events.txt
        
        # Get metrics from Prometheus if available
        kubectl port-forward svc/prometheus 9090:9090 -n alys-v2-testing &
        sleep 10
        curl -s "http://localhost:9090/api/v1/query?query=alys_system_health_score" > k8s-test-results/metrics.json || true
        
    - name: Upload Kubernetes test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: k8s-test-results-${{ github.run_id }}
        path: k8s-test-results/
        retention-days: 14
        
    - name: Cleanup Kubernetes resources
      if: always()
      run: |
        kubectl delete namespace alys-v2-testing --ignore-not-found=true
        kind delete cluster --name alys-test-cluster

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Run cargo audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run dependency scan
      run: |
        cargo install cargo-deny
        cargo deny check
        
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/rust
        generateSarif: "1"
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif

  # Generate and publish test report
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, supervision-tests, performance-tests]
    if: always()
    steps:
    - uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: all-artifacts/
        
    - name: Generate comprehensive test report
      run: |
        python3 scripts/generate_test_report.py \
          --artifacts-dir all-artifacts/ \
          --output test-report.html \
          --github-run-id ${{ github.run_id }} \
          --github-sha ${{ github.sha }}
        
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: test-report-${{ github.run_id }}
        path: test-report.html
        retention-days: 30
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read test summary (would be generated by test report script)
          let summary = 'Test execution completed.';
          
          try {
            if (fs.existsSync('test-summary.txt')) {
              summary = fs.readFileSync('test-summary.txt', 'utf8');
            }
          } catch (error) {
            console.log('Could not read test summary:', error);
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🧪 Alys V2 Actor System Test Results\n\n${summary}\n\n[View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
          });

  # Notify on failure
  notify:
    name: Notify on Failure  
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, supervision-tests, performance-tests, k8s-tests]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    steps:
    - name: Notify team of test failures
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alys-v2-development'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        message: |
          🚨 Alys V2 Actor System tests failed!
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Please check the failed tests and fix any issues.

# Concurrency settings to cancel previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true